import http from 'k6/http';
import { sleep } from 'k6';
import encoding from 'k6/encoding';

export const options = {
  scenarios: {
    shufflenet_test: {
      // some arbitrary scenario name
      executor: 'ramping-vus',
      startTime: '0s',

      //vus: 40,
      //duration: '5m',
      stages: [
        { duration: '2m', target: 30 },
        { duration: '2m', target: 40 },
        { duration: '1m', target: 30 },
      ],
      gracefulStop: '1s', // do not wait for iterations to finish in the end
      tags: { test_type: 'shufflenet' }, // extra tags for the metrics generated by this scenario
      exec: 'shufflenet', // the function this scenario will execute
    },
    squeezenet_test: {
      //executor: 'constant-arrival-rate',
      //executor: 'constant-vus',
      executor: 'ramping-vus',
	    //rate: 90,
      //timeUnit: '1m', // 90 iterations per minute, i.e. 1.5 RPS
      startTime: '0s',
      //duration: '5m',
      //vus: 40,
      stages: [
        { duration: '2m', target: 30 },
        { duration: '2m', target: 40 },
	{ duration: '1m', target: 30 },
      ],
      //preAllocatedVUs: 10, // the size of the VU (i.e. worker) pool for this scenario
      tags: { test_type: 'squeezenet' }, // different extra metric tags for this scenario
      //env: { MY_CROC_ID: '1' }, // and we can specify extra environment variables as well!
      exec: 'squeezenet', // this scenario is executing different code than the one above!
    },
    mobilenet_test: {
      //executor: 'ramping-arrival-rate',
      //startTime: '30s', // the ramping API test starts a little later
      //executor: 'constant-vus',
      executor: 'ramping-vus',
	    //startRate: 50,
      //timeUnit: '1s', // we start at 50 iterations per second
      startTime: '0s',
      //duration: '5m',
      //stages: [
      //  { target: 200, duration: '30s' }, // go from 50 to 200 iters/s in the first 30 seconds
      //  { target: 200, duration: '3m30s' }, // hold at 200 iters/s for 3.5 minutes
      //  { target: 0, duration: '30s' }, // ramp down back to 0 iters/s over the last 30 second
      //],
      //vus: 40
	    //,
      //preAllocatedVUs: 50, // how large the initial pool of VUs would be
      //maxVUs: 100, // if the preAllocatedVUs are not enough, we can initialize more
      stages: [
        { duration: '2m', target: 30 },
        { duration: '2m', target: 40 },
        { duration: '1m', target: 30 },
      ],

      tags: { test_type: 'mobilenet' }, // different extra metric tags for this scenario
      //env: { MY_CROC_ID: '2' }, // same function, different environment variables
      exec: 'mobilenet', // same function as the scenario above, but with different env vars
   }, 
    bert_test: {
      //executor: 'constant-arrival-rate',
      //executor: 'constant-vus',
      executor: 'ramping-vus',
	    //vus: 50,
      //rate: 90,
      //timeUnit: '1m', // 90 iterations per minute, i.e. 1.5 RPS
      startTime: '0s',
      //duration: '5m',
      stages: [
        { duration: '2m', target: 30 },
        { duration: '2m', target: 40 },
        { duration: '1m', target: 30 },
      ],
      //preAllocatedVUs: 10, // the size of the VU (i.e. worker) pool for this scenario
      tags: { test_type: 'bert' }, // different extra metric tags for this scenario
      //env: { MY_CROC_ID: '1' }, // and we can specify extra environment variables as well!
      exec: 'bert', // this scenario is executing different code than the one above!
    },
    paddle_test: {
      executor: 'constant-arrival-rate',
      //executor: 'constant-vus',
      //vus: 50,
      rate: 125,
      timeUnit: '1m', // 90 iterations per minute, i.e. 1.5 RPS
      startTime: '0s',
      duration: '5m',
      preAllocatedVUs: 2, // the size of the VU (i.e. worker) pool for this scenario
      tags: { test_type: 'paddle' }, // different extra metric tags for this scenario
      //env: { MY_CROC_ID: '1' }, // and we can specify extra environment variables as well!
      exec: 'paddle', // this scenario is executing different code than the one above!
    },
  },
  discardResponseBodies: true,
  thresholds: {
    // we can set different thresholds for the different scenarios because
    // of the extra metric tags we set!
    //'http_req_duration{test_type:bert}': ['p(95)<250', 'p(99)<350'],
    //'http_req_duration{test_type:shufflenet}': ['p(99)<500'],
    // we can reference the scenario names as well
    //'http_req_duration{scenario:mobilenet_test}': ['p(99)<300'],
  },
};

let shufflenet_model = {
        method: 'GET',
        url: 'http://10.106.46.112:8080/function/shufflenet/',
};
let squeezenet_model = {
        method: 'GET',
        url: 'http://10.106.46.112:8080/function/squeezenet',
};
let mobilenet_model = {
        method: 'GET',
        url: 'http://10.106.46.112:8080/function/mobilenet',
};
let bertsquad_model  = {
        method: 'GET',
        url: 'http://10.106.46.112:8080/function/bert-squad/?question=What%20food%20does%20Harry%20like?&&context=My%20name%20is%20Harry%20and%20I%20grew%20up%20in%20Canada.%20I%20love%20bananas.',
};
let bertsquad_mount_model  = {
        method: 'GET',
        url: 'http://10.106.46.112:8080/function/bert-squad-mounted/?question=What%20food%20does%20Harry%20like?&&context=My%20name%20is%20Harry%20and%20I%20grew%20up%20in%20Canada.%20I%20love%20bananas.',
};
const binFile = open('zh.wav', 'b');
const paddledata = {
  audio: encoding.b64encode(binFile),
  audio_format: "wav",
  sample_rate: 16000,
  lang: "zh_cn",
}
let paddle_model = {
        method: 'POST',
        url: 'http://10.106.46.112:8080/function/paddlespeech/paddlespeech/asr',
        body: JSON.stringify(paddledata),
        params: {
            headers: { 'Content-Type': 'application/json'},
        },
};


export function shufflenet() {
  http.get(shufflenet_model.url);
}

export function squeezenet() {
  http.get(squeezenet_model.url);
}

export function mobilenet() {
  http.get(mobilenet_model.url);
}

export function bert() {
  http.get(bertsquad_model.url);
}

export function paddle() {
  http.post(paddle_model.url, paddle_model.body, paddle_model.params)
}

